[
  {
    "objectID": "slides/metaprogramming/index.html#section",
    "href": "slides/metaprogramming/index.html#section",
    "title": "Advanced R Tips and Tricks",
    "section": "",
    "text": "Advanced R  Tips and Tricks\n\n\nMetaprogramming\n\n\n22nd October 2024 @ WOMBAT\n\nMitchell O’Hara-Wild, Nectric\n\n\n\n\n\n\n\nUseful links\n\n\n social.mitchelloharawild.com\n workshop.nectric.com.au/advr-wombat24/\n mitchelloharawild/workshop-advr-wombat24"
  },
  {
    "objectID": "slides/metaprogramming/index.html#metaprogramming",
    "href": "slides/metaprogramming/index.html#metaprogramming",
    "title": "Advanced R Tips and Tricks",
    "section": "Metaprogramming",
    "text": "Metaprogramming\nMetaprogramming is programming about programming.\nIn other words, writing code that can inspect and modify code.\n\n\n\n\n\n\n\n\nA powerful idea\n\n\nUnlike most programming languages, R embraces metaprogramming and non-standard evaluation (NSE).\nThis powers much of the strange but wonderful interface designs in R and its packages."
  },
  {
    "objectID": "slides/metaprogramming/index.html#the-rlang-package",
    "href": "slides/metaprogramming/index.html#the-rlang-package",
    "title": "Advanced R Tips and Tricks",
    "section": "The rlang package",
    "text": "The rlang package\n\nlibrary(rlang)\n\n\nA package for writing R code that interacts with R code.\n\n\n\n\n\n\n\nNot a new idea!\n\n\nMetaprogramming/NSE doesn’t require the rlang package.\nThere are base R equivalents to the functions shown today.\nNSE is widely used in base R (not just in the tidyverse!)"
  },
  {
    "objectID": "slides/metaprogramming/index.html#parsing-code",
    "href": "slides/metaprogramming/index.html#parsing-code",
    "title": "Advanced R Tips and Tricks",
    "section": "Parsing code",
    "text": "Parsing code\nEvery time you run code anywhere in R it needs to be ‘interpreted’ by the parser.\nThe parser reads unstructured text (your written code) and interprets it as an expression.\n\n# parse(text = \"seq(1, 10, by = 0.5)\")\nparse_expr(\"seq(1, 10, by = 0.5)\")\n\nseq(1, 10, by = 0.5)"
  },
  {
    "objectID": "slides/metaprogramming/index.html#deparsing-code",
    "href": "slides/metaprogramming/index.html#deparsing-code",
    "title": "Advanced R Tips and Tricks",
    "section": "Deparsing code",
    "text": "Deparsing code\nDeparsing takes an expression and converts it back to text.\n\nmy_seq &lt;- parse_expr(\"seq(1, 10, by = 0.5)\")\nexpr_text(my_seq)\n\n[1] \"seq(1, 10, by = 0.5)\"\n\n\nThis can be useful for providing informative error messages, or print output for objects which store expressions."
  },
  {
    "objectID": "slides/metaprogramming/index.html#code-is-data",
    "href": "slides/metaprogramming/index.html#code-is-data",
    "title": "Advanced R Tips and Tricks",
    "section": "Code is data",
    "text": "Code is data\nExpressions (code) can be used like any other data in R.\n\nmy_seq &lt;- parse_expr(\"seq(1, 10, by = 0.5)\")\nmy_seq\n\nseq(1, 10, by = 0.5)\n\n\n\n\nclass(my_seq)\n\n[1] \"call\"\n\n\n\n\neval(my_seq)\n\n [1]  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0\n[16]  8.5  9.0  9.5 10.0"
  },
  {
    "objectID": "slides/metaprogramming/index.html#inspecting-code",
    "href": "slides/metaprogramming/index.html#inspecting-code",
    "title": "Advanced R Tips and Tricks",
    "section": "Inspecting code",
    "text": "Inspecting code\nR expressions behave exactly like lists\n\nas.list(my_seq)\n\n[[1]]\nseq\n\n[[2]]\n[1] 1\n\n[[3]]\n[1] 10\n\n$by\n[1] 0.5"
  },
  {
    "objectID": "slides/metaprogramming/index.html#inspecting-code-1",
    "href": "slides/metaprogramming/index.html#inspecting-code-1",
    "title": "Advanced R Tips and Tricks",
    "section": "Inspecting code",
    "text": "Inspecting code\nThey can also be subsetted to inspect the functions and arguments.\n\nmy_seq[[1]]\n\nseq\n\nmy_seq[[\"by\"]]\n\n[1] 0.5"
  },
  {
    "objectID": "slides/metaprogramming/index.html#modifying-code",
    "href": "slides/metaprogramming/index.html#modifying-code",
    "title": "Advanced R Tips and Tricks",
    "section": "Modifying code",
    "text": "Modifying code\nExpressions can be modified by replacing their elements.\n\nmy_seq[[\"by\"]] &lt;- 1\nmy_seq\n\nseq(1, 10, by = 1)\n\neval(my_seq)\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "slides/metaprogramming/index.html#looking-at-code",
    "href": "slides/metaprogramming/index.html#looking-at-code",
    "title": "Advanced R Tips and Tricks",
    "section": "Looking at code",
    "text": "Looking at code\n\n\n\n\n\n\n\nYour turn!\n\n\nHow do infix operators (like +, *, and %in%) get interpreted by the parser?\nTry to parse 5 + 3 * 7, and see how the order of operations are represented in the parsed expression.\nBonus: rewrite this expression without infix operators."
  },
  {
    "objectID": "slides/metaprogramming/index.html#abstract-syntax-trees",
    "href": "slides/metaprogramming/index.html#abstract-syntax-trees",
    "title": "Advanced R Tips and Tricks",
    "section": "Abstract syntax trees",
    "text": "Abstract syntax trees\nThe structure of expressions is commonly known as an abstract syntax tree (AST). We can use lobstr::ast() to explore it.\n\nlobstr::ast(f(x, \"y\", 1))"
  },
  {
    "objectID": "slides/metaprogramming/index.html#abstract-syntax-trees-1",
    "href": "slides/metaprogramming/index.html#abstract-syntax-trees-1",
    "title": "Advanced R Tips and Tricks",
    "section": "Abstract syntax trees",
    "text": "Abstract syntax trees\nMore complicated (nested) code results in a larger/deeper AST.\n\nlobstr::ast(f(g(1, 2), h(3, 4, i())))"
  },
  {
    "objectID": "slides/metaprogramming/index.html#abstract-syntax-trees-2",
    "href": "slides/metaprogramming/index.html#abstract-syntax-trees-2",
    "title": "Advanced R Tips and Tricks",
    "section": "Abstract syntax trees",
    "text": "Abstract syntax trees\n\n\n\n\n\n\n\nYour turn!\n\n\nInspect the AST for the following code:\n\n5 + 3 * 7\nmtcars |&gt; select(cyl)\nmtcars |&gt; mutate(wt/hp)\n\nHow does R structure these expressions?\nBonus: does -2^2 yield 4 or -4? Why?"
  },
  {
    "objectID": "slides/metaprogramming/index.html#analysing-code",
    "href": "slides/metaprogramming/index.html#analysing-code",
    "title": "Advanced R Tips and Tricks",
    "section": "Analysing code",
    "text": "Analysing code\nHow would you programmatically analyse code from hundreds of packages?\n\nRegular expressions on the source code? Maybe…\nTraverse the parsed source code’s AST? Yes!\n\n\n\nThis however can be tricky, requiring recursive algorithms that explore the AST using breadth/depth first search (BFS/DFS)."
  },
  {
    "objectID": "slides/metaprogramming/index.html#coding-code",
    "href": "slides/metaprogramming/index.html#coding-code",
    "title": "Advanced R Tips and Tricks",
    "section": "Coding code",
    "text": "Coding code\nYou can also write code that creates code. For this we use the call2() function\n\n# call(\"seq\", 1, 10, by = 0.5)\ncall2(\"seq\", 1, 10, by = 0.5)\n\nseq(1, 10, by = 0.5)\n\n\n\n\n\n\n\n\n\n\nparse_expr() or call2()?\n\n\nYou might be tempted to parse() code that you paste() together, but this is unsafe and unreliable! Why?"
  },
  {
    "objectID": "slides/metaprogramming/index.html#coding-code-1",
    "href": "slides/metaprogramming/index.html#coding-code-1",
    "title": "Advanced R Tips and Tricks",
    "section": "Coding code",
    "text": "Coding code\n\n\n\n\n\n\n\nAfter the break…\n\n\nRecall in week 8 (shiny) I shared this function:\n\nreact &lt;- function(e) new_function(alist(), expr(eval(!!enexpr(e))))\n\nNext we’ll learn how it uses NSE to change how code runs."
  },
  {
    "objectID": "slides/metaprogramming/index.html#code-evaluation",
    "href": "slides/metaprogramming/index.html#code-evaluation",
    "title": "Advanced R Tips and Tricks",
    "section": "Code evaluation",
    "text": "Code evaluation\n\n\n\n\nStandard evaluation\n\n\n\nThe code and environment is unchanged.\nThe result is evaluated as expected.\n\n\n\n\n\n\n\n\n\n\nNon-standard evaluation (NSE)\n\n\n\nThe code and/or the environment is changed.\nLeading to the evaluated result changing."
  },
  {
    "objectID": "slides/metaprogramming/index.html#standard-or-non-standard-evaluation",
    "href": "slides/metaprogramming/index.html#standard-or-non-standard-evaluation",
    "title": "Advanced R Tips and Tricks",
    "section": "Standard or non-standard evaluation?",
    "text": "Standard or non-standard evaluation?\n\n\n\n\n\n\n\nYour turn!\n\n\nDo the following functions use standard evaluation or NSE?\n\n\nlibrary(rlang)\na + b * c\nmtcars |&gt; select(cyl)\nread_csv(\"data/study.csv\")\nggplot() + geom_line()\nmtcars |&gt; mutate(wt/hp)\nwith(mtcars, wt/hp)"
  },
  {
    "objectID": "slides/metaprogramming/index.html#the-building-blocks-of-code-evaluation",
    "href": "slides/metaprogramming/index.html#the-building-blocks-of-code-evaluation",
    "title": "Advanced R Tips and Tricks",
    "section": "The building blocks of code evaluation",
    "text": "The building blocks of code evaluation\nThere are four building blocks used in evaluating code.\n\nConstants: A specific value like 1 or \"data/study.csv\".\nSymbols: A name of an object, like pi.\nExpressions: Code structured as an AST.\nEnvironments: The place where named objects are found.\n\n\n\n\n\n\n\n\n\nQuestion?\n\n\nHow are these building blocks used together to construct and evaluate code?"
  },
  {
    "objectID": "slides/metaprogramming/index.html#the-building-blocks-of-code-evaluation-1",
    "href": "slides/metaprogramming/index.html#the-building-blocks-of-code-evaluation-1",
    "title": "Advanced R Tips and Tricks",
    "section": "The building blocks of code evaluation",
    "text": "The building blocks of code evaluation\nIn rlang, we have three main building block functions:\n\nsym(\"pi\"): a symbol/name like pi\nexpr(1/pi): an expression for 1/pi\nquo(1/pi): a quosure (expression and environment)\n\n\n\n\n\n\n\n\n\nFollow along!\n\n\nUse call2() and these building blocks to construct and evaluate mtcars |&gt; mutate(wt/hp).\nHint: recall that x |&gt; f(y) is parsed as f(x, y)."
  },
  {
    "objectID": "slides/metaprogramming/index.html#the-building-blocks-of-code-evaluation-2",
    "href": "slides/metaprogramming/index.html#the-building-blocks-of-code-evaluation-2",
    "title": "Advanced R Tips and Tricks",
    "section": "The building blocks of code evaluation",
    "text": "The building blocks of code evaluation\n\n\n\n\n\n\n\nYour turn!\n\n\nSpot the difference.\nHow do the results of the following functions differ?\n\nsym(\"2 * pi\")\nexpr(2 * pi)\nquo(2 * pi)"
  },
  {
    "objectID": "slides/metaprogramming/index.html#capturing-code",
    "href": "slides/metaprogramming/index.html#capturing-code",
    "title": "Advanced R Tips and Tricks",
    "section": "Capturing code",
    "text": "Capturing code\nMore often than not, NSE involves capturing user code that was used in your function. This is done with en*() functions:\n\nensym(x): capture a symbol\nenexpr(x): capture an expression\nenquo(x): capture a quosure\n\n\nThese must be used inside functions, for example:\n\ncapture_expr &lt;- function(x) {\n  enexpr(x)\n}\ncapture_expr(1/pi)"
  },
  {
    "objectID": "slides/metaprogramming/index.html#unquoting-bang-bang",
    "href": "slides/metaprogramming/index.html#unquoting-bang-bang",
    "title": "Advanced R Tips and Tricks",
    "section": "Unquoting (bang-bang!!)",
    "text": "Unquoting (bang-bang!!)\nWhy doesn’t the following code work?\n\nlog_expr &lt;- function(x) {\n  # Capture expression\n  x &lt;- enexpr(x)\n  # Return new expression with log()\n  expr(log(x))\n}\nlog_expr(1/pi)\n\nlog(x)"
  },
  {
    "objectID": "slides/metaprogramming/index.html#unquoting-bang-bang-1",
    "href": "slides/metaprogramming/index.html#unquoting-bang-bang-1",
    "title": "Advanced R Tips and Tricks",
    "section": "Unquoting (bang-bang!!)",
    "text": "Unquoting (bang-bang!!)\nTo use captured code in our functions, we need to unquote it.\n\nlog_expr &lt;- function(x) {\n  # Capture expression\n  x &lt;- enexpr(x)\n  # Return new expression with log()\n  expr(log(!!x))\n}\nlog_expr(1/pi)\n\nlog(1/pi)\n\n\nexpr(log(!!x)) will create an expression (expr()) that replaces x with its value (1/pi)."
  },
  {
    "objectID": "slides/metaprogramming/index.html#unquoting-bang-bang-2",
    "href": "slides/metaprogramming/index.html#unquoting-bang-bang-2",
    "title": "Advanced R Tips and Tricks",
    "section": "Unquoting (bang-bang!!)",
    "text": "Unquoting (bang-bang!!)\n\n\n\n\n\n\n\nUnquoting in analysis\n\n\nUnquoting replaces the object’s name with its value.\nThis is also useful when using NSE functions.\n\n\n\n\nHow can !! be useful with dplyr?"
  },
  {
    "objectID": "slides/metaprogramming/index.html#unquoting-bang-bang-3",
    "href": "slides/metaprogramming/index.html#unquoting-bang-bang-3",
    "title": "Advanced R Tips and Tricks",
    "section": "Unquoting (bang-bang!!)",
    "text": "Unquoting (bang-bang!!)\nSuppose we wanted to programmatically filter() mtcars$cyl:\n\ncyl &lt;- 4\nmtcars |&gt; \n  filter(cyl == cyl)\n\nWhat’s the problem? How can unquoting help?"
  },
  {
    "objectID": "slides/metaprogramming/index.html#embracing-inputs-curly-curly",
    "href": "slides/metaprogramming/index.html#embracing-inputs-curly-curly",
    "title": "Advanced R Tips and Tricks",
    "section": "Embracing inputs ({{curly-curly}})",
    "text": "Embracing inputs ({{curly-curly}})\nThe pattern !!enquo(x) is so often in functions that it has a special shortcut known as ‘embrace’ or ‘curly-curly’. The code {x} is identical to !!enquo(x).\nConsider this function for summarising a value’s range:\n\nvar_summary &lt;- function(data, var) {\n  data |&gt; \n    summarise(n = n(), min = min({{ var }}), max = max({{ var }}))\n}\nmtcars |&gt; \n  group_by(cyl) |&gt; \n  var_summary(mpg)\n\nWhy is enquo() important here?"
  },
  {
    "objectID": "slides/metaprogramming/index.html#unquote-splicing-bang-bang-bang",
    "href": "slides/metaprogramming/index.html#unquote-splicing-bang-bang-bang",
    "title": "Advanced R Tips and Tricks",
    "section": "Unquote-splicing (bang-bang-bang!!!)",
    "text": "Unquote-splicing (bang-bang-bang!!!)\nIt is sometimes useful to unquote multiple code elements across multiple arguments of a function.\nThis is done with unquote-splicing using !!! on a list of symbols, expressions, or quosures.\n\nA list symbols, expressions, or quosures can be:\n\ncreated with syms(), exprs(), quos()\ncaptured with ensyms(), enexprs(), enquos()\n\nThis is often used to capture, modify and pass on dots (...)."
  },
  {
    "objectID": "slides/metaprogramming/index.html#unquote-splicing-bang-bang-bang-1",
    "href": "slides/metaprogramming/index.html#unquote-splicing-bang-bang-bang-1",
    "title": "Advanced R Tips and Tricks",
    "section": "Unquote-splicing (bang-bang-bang!!!)",
    "text": "Unquote-splicing (bang-bang-bang!!!)\nFor example, the var_summary() function can be extended to accept multiple variables (or expressions) via dots (...).\n\nvar_summaries &lt;- function(data, ...) {\n  vars &lt;- enquos(...)\n  .min &lt;- purrr::map(vars, ~ expr(min(!!.)))\n  .max &lt;- purrr::map(vars, ~ expr(max(!!.)))\n  data |&gt; \n    summarise(n = n(), !!!.min, !!!.max)\n}\nmtcars |&gt; \n  group_by(cyl) |&gt; \n  var_summaries(mpg, wt)"
  },
  {
    "objectID": "slides/metaprogramming/index.html#tidy-dots",
    "href": "slides/metaprogramming/index.html#tidy-dots",
    "title": "Advanced R Tips and Tricks",
    "section": "Tidy dots (:=)",
    "text": "Tidy dots (:=)\nTidy dots (:=) allow the argument names to be unquoted too.\nFor example:\n\nmy_df &lt;- function(x) {\n  tibble(!!expr_text(enexpr(x)) := x * 2)\n}\nmy_var &lt;- 10\nmy_df(my_var)\n\n# A tibble: 1 x 1\n  my_var\n   &lt;dbl&gt;\n1     20\n\n\nYou can alternatively use !!! with a named list."
  },
  {
    "objectID": "slides/metaprogramming/index.html#tidy-evaluation-1",
    "href": "slides/metaprogramming/index.html#tidy-evaluation-1",
    "title": "Advanced R Tips and Tricks",
    "section": "Tidy evaluation",
    "text": "Tidy evaluation\nTidy evaluation refers to the use of NSE in the tidyverse to make data analysis easier.\nNSE is used widely across tidyverse packages, but at the same time it is used sparingly.\n\n\n\n\n\n\n\nYour turn!\n\n\nQuestion\nWhere have you seen NSE used in tidyverse packages?"
  },
  {
    "objectID": "slides/metaprogramming/index.html#tidy-evaluation-2",
    "href": "slides/metaprogramming/index.html#tidy-evaluation-2",
    "title": "Advanced R Tips and Tricks",
    "section": "Tidy evaluation",
    "text": "Tidy evaluation\nTidy evaluation searches the variables of the data first, followed by the search path of the user’s environment.\nThis is a type of NSE, since it changes the environment in which code is ran.\n\nmtcars |&gt; \n  mutate(mpg/wt)\n\nmpg/wt would ordinarily error since mpg and wt aren’t found, but mutate() uses NSE to first search the dataset."
  },
  {
    "objectID": "slides/metaprogramming/index.html#tidy-evaluation-3",
    "href": "slides/metaprogramming/index.html#tidy-evaluation-3",
    "title": "Advanced R Tips and Tricks",
    "section": "Tidy evaluation",
    "text": "Tidy evaluation\nThis is accomplished using eval_tidy(), with the arguments:\n\nexpr: The expression (code) to evaluate\ndata: The dataset ‘mask’ to search first\nenv: The environment to search next.\n\nUnlike eval(), this will:\n\nRespect the environments of quosures\nAttach pronouns for .data and .env"
  },
  {
    "objectID": "slides/metaprogramming/index.html#tidy-evaluation-4",
    "href": "slides/metaprogramming/index.html#tidy-evaluation-4",
    "title": "Advanced R Tips and Tricks",
    "section": "Tidy evaluation",
    "text": "Tidy evaluation\nWe can use eval_tidy() to create a simple dplyr::mutate() function variant.\n\nmy_mutate &lt;- function(.data, mutation) {\n  mutation &lt;- enquo(mutation)\n  result &lt;- eval_tidy(mutation, data = .data, env = caller_env())\n  .data[[as_label(mutation)]] &lt;- result\n  .data\n}\nmtcars |&gt; \n  my_mutate(mpg/wt)\n\nQuestion: What features are missing in our function compared to dplyr::mutate()?"
  },
  {
    "objectID": "slides/metaprogramming/index.html#tidyselect",
    "href": "slides/metaprogramming/index.html#tidyselect",
    "title": "Advanced R Tips and Tricks",
    "section": "tidyselect",
    "text": "tidyselect\nThe tidyselect package is useful for selecting variables from a dataset with NSE.\nYou almost certainly have used it in the tidyverse without knowing.\nIt powers column selection in:\n\ndplyr for select(), across(), and more.\ntidyr for almost everything."
  },
  {
    "objectID": "slides/metaprogramming/index.html#tidyselect-1",
    "href": "slides/metaprogramming/index.html#tidyselect-1",
    "title": "Advanced R Tips and Tricks",
    "section": "tidyselect",
    "text": "tidyselect\nIt enables variable selection with a domain specific language (DSL), which uses NSE to identify columns with:\n\nvar1:var10\nmatches(\"x.\\\\d\")\nall_of(&lt;chr&gt;)\nwhere(&lt;fn&gt;)"
  },
  {
    "objectID": "slides/metaprogramming/index.html#tidyselect-2",
    "href": "slides/metaprogramming/index.html#tidyselect-2",
    "title": "Advanced R Tips and Tricks",
    "section": "tidyselect",
    "text": "tidyselect\nIf you need tidy column selection, simply import and use tidyselect::eval_select().\n\nlibrary(tidyselect)\nx &lt;- expr(mpg:cyl)\neval_select(x, mtcars)\n\nmpg cyl \n  1   2 \n\n\nThis function returns the column numbers that were selected."
  },
  {
    "objectID": "slides/metaprogramming/index.html#tidyselect-3",
    "href": "slides/metaprogramming/index.html#tidyselect-3",
    "title": "Advanced R Tips and Tricks",
    "section": "tidyselect",
    "text": "tidyselect\nPutting it all together, we can create our own dplyr::select() function variant.\n\nmy_select &lt;- function(.data, cols) {\n  cols &lt;- eval_select(enexpr(cols), .data)\n  .data[cols]\n}\nmy_select(mtcars, c(mpg, wt, vs:carb))\n\n\n\n\n\n\n\n\nYour turn!\n\n\nModify this function to instead accept the selected columns via the dots (...), just like dplyr::select() does."
  },
  {
    "objectID": "slides/metaprogramming/index.html#tidyverse-design-principles",
    "href": "slides/metaprogramming/index.html#tidyverse-design-principles",
    "title": "Advanced R Tips and Tricks",
    "section": "Tidyverse design principles",
    "text": "Tidyverse design principles\nNotice how little NSE the tidyverse uses to great effect.\nA lot of thought has gone into designing the tidyverse, which mostly uses standard evaluation: https://design.tidyverse.org/\n\n\n\n\n\n\n\n\nA design compromise\n\n\nWhile very appreciated by users, NSE introduces a lot of complexity when programming with tidyverse packages."
  },
  {
    "objectID": "slides/metaprogramming/index.html#software-design-with-nse",
    "href": "slides/metaprogramming/index.html#software-design-with-nse",
    "title": "Advanced R Tips and Tricks",
    "section": "Software design with NSE",
    "text": "Software design with NSE\nIn most cases you shouldn’t add NSE to your package.\n\n\n\n\n\n\n\n\nWhy?\n\n\nNSE can be incredibly confusing for users!\nCode might work outside your function, but be completely different when used inside it.\n\n\n\n\n\n\nUnderstanding NSE however is very useful for advanced use of tidyverse packages in non-interactive contexts."
  },
  {
    "objectID": "slides/metaprogramming/index.html#software-design-with-nse-1",
    "href": "slides/metaprogramming/index.html#software-design-with-nse-1",
    "title": "Advanced R Tips and Tricks",
    "section": "Software design with NSE",
    "text": "Software design with NSE\nIf you must use NSE, you should:\n\nUse it sparingly\nBe consistent\nClearly document it\nGet a lot of design benefit from it\n(not just for slightly less typing!)"
  },
  {
    "objectID": "slides/metaprogramming/index.html#thats-all-we-have-time-for",
    "href": "slides/metaprogramming/index.html#thats-all-we-have-time-for",
    "title": "Advanced R Tips and Tricks",
    "section": "That’s all we have time for!",
    "text": "That’s all we have time for!\n\n\n\n\n\n\n\n\nLearn more advanced R tricks\n\n\n\nAdvanced R 2nd edition textbook\n\nFreely available online! https://adv-r.hadley.nz/\n\n\n\n\n\n\n\n\n\nI appreciate your feedback\n\n\nShort feedback form: https://feedback.nectric.com.au/pZ26\n\n\n\n\n\n\n\n\n\n\nUseful links\n\n\n social.mitchelloharawild.com\n workshop.nectric.com.au/advr-wombat24/\n mitchelloharawild/workshop-advr-wombat24"
  },
  {
    "objectID": "slides/metaprogramming/index.html#unsplash-credits",
    "href": "slides/metaprogramming/index.html#unsplash-credits",
    "title": "Advanced R Tips and Tricks",
    "section": "Unsplash credits",
    "text": "Unsplash credits\n\n\n\n\n\n\n\nThanks to these Unsplash contributors for their photos\n\n\n\n\n\nSander Weeteling: Photo\nKasia Gajek: Photo\nNASA: United States seen from orbit\nBalint Mendlik: Photo\nSander Weeteling: Photo"
  },
  {
    "objectID": "slides/quirks/index.html#section",
    "href": "slides/quirks/index.html#section",
    "title": "Advanced R Tips and Tricks",
    "section": "",
    "text": "Advanced R  Tips and Tricks\n\n\nQuirky R\n\n\n22nd October 2024 @ WOMBAT\n\nMitchell O’Hara-Wild, Nectric\n\n\n\n\n\n\n\nUseful links\n\n\n social.mitchelloharawild.com\n workshop.nectric.com.au/advr-wombat24/\n mitchelloharawild/workshop-advr-wombat24"
  },
  {
    "objectID": "slides/quirks/index.html#section-1",
    "href": "slides/quirks/index.html#section-1",
    "title": "Advanced R Tips and Tricks",
    "section": "",
    "text": "🎯 Today’s goals\n\n\n\nLearn about time series data.\nVisualise common time series patterns.\nProduce forecasts from a statistical models.\nEvaluate the forecasting accuracy.\n\n\n\n\n\n\n\n\n🌻 Expectations\n\n\n\nFollow the code of conduct.\nAsk relevant questions any time, Q&A during breaks.\nBe kind and respectful.\nMake mistakes and learn!\n\n\n\n\n\nhttps://workshop.nectric.com.au/user2024/"
  },
  {
    "objectID": "slides/quirks/index.html#section-2",
    "href": "slides/quirks/index.html#section-2",
    "title": "Advanced R Tips and Tricks",
    "section": "",
    "text": "Mitchell O’Hara‑Wild\nMonash + Nectric\n @mitchelloharawild\n @mitchelloharawild\n\nWelcome, who am I?\n\n🎓 PhD candidate at Monash University\n📊 Data consulting and workshops at Nectric\n📈 Specialised in time series analysis\n📦 Develops R packages (fable, vitae, etc.)\n🤖 DIYs IoT devices for home automation\n🌱 Permaculturist (🐝, 🐣, 🍄, 🌞)"
  },
  {
    "objectID": "slides/quirks/index.html#section-3",
    "href": "slides/quirks/index.html#section-3",
    "title": "Advanced R Tips and Tricks",
    "section": "",
    "text": "You!\nUseR! attendee\n\n🙋 Hi, who are you?\nHands up if…\n\n\n🧑‍💻 You’ve used R\n📊 You’ve analysed data\n🫧 Used tidyverse packages (dplyr, ggplot2…)\n📈 You’ve worked with time series data before\n🔮 You’ve produced a forecast before\n🤩 You’ve used fable!"
  },
  {
    "objectID": "slides/quirks/index.html#after-the-break",
    "href": "slides/quirks/index.html#after-the-break",
    "title": "Advanced R Tips and Tricks",
    "section": "After the break…",
    "text": "After the break…\n\n\n\n\n\n\n\n\nLearn more advanced R tricks\n\n\n\nAdvanced R 2nd edition textbook\n\nFreely available online! https://adv-r.hadley.nz/\n\n\n\n\n\n\n\n\n\nI appreciate your feedback\n\n\nShort feedback form: https://feedback.nectric.com.au/pZ26\n\n\n\n\n\n\n\n\n\n\nUseful links\n\n\n social.mitchelloharawild.com\n workshop.nectric.com.au/advr-wombat24/\n mitchelloharawild/workshop-advr-wombat24"
  },
  {
    "objectID": "slides/quirks/index.html#unsplash-credits",
    "href": "slides/quirks/index.html#unsplash-credits",
    "title": "Advanced R Tips and Tricks",
    "section": "Unsplash credits",
    "text": "Unsplash credits\n\n\n\n\n\n\n\nThanks to these Unsplash contributors for their photos\n\n\n\n\n\nSander Weeteling: Photo\nKasia Gajek: Photo\nNASA: United States seen from orbit\nBalint Mendlik: Photo\nSander Weeteling: Photo"
  },
  {
    "objectID": "index.html#course-overview",
    "href": "index.html#course-overview",
    "title": "Advanced R Tips and Tricks",
    "section": "Course Overview",
    "text": "Course Overview\nR is widely used for data analysis and statistics, and from a programming perspective R is weird1! The quirks of R is shocking to most programmers, but the language’s flexibility is what makes it great for statistics and data. In this three-hour workshop you’ll learn just how quirky R can be, we’ll have some fun poking around R, and you’ll leave with some useful tips and tricks for harnessing R’s oddities in your analysis or packages.\nEver wondered what a ‘closure’ is and why it isn’t subsettable? Why do we need tibble when we have data.frame? How does tidy evaluation make the tidyverse so easy to use for analysis, but so difficult to automate? Why is it good (for R) to be lazy?! I’ll answer all of these questions and more, along with any of your burning R questions.\nThis workshop is part of the WOMBAT 2024 workshop’s tutorials, and will run in-person in Melbourne on October 22nd 2024."
  },
  {
    "objectID": "index.html#registration",
    "href": "index.html#registration",
    "title": "Advanced R Tips and Tricks",
    "section": "Registration",
    "text": "Registration\nRegistration costs AU$150 (discounted to AU$75 for students). Registration is now closed.\nPlease note that this is an advanced workshop for existing R users. New users to R should consider other workshops."
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "Advanced R Tips and Tricks",
    "section": "Learning objectives",
    "text": "Learning objectives\nParticipants will learn how to:\n\nUnderstand (and embrace) the quirks of using R\nAppreciate how ‘helpful’ R tries to be with vectors, recycling and typing\nUse vctrs to avoid common problems with vectors, recycling and typing\nWrite code that writes and runs code (metaprogramming)\nUse non-standard evaluation for good (and evil) code design"
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "Advanced R Tips and Tricks",
    "section": "Instructor",
    "text": "Instructor\n\nMitchell O’Hara-Wild (he/him) is an award-winning teaching associate at Monash University and consultant at Nectric with particular expertise in forecasting, data analysis and statistical computing using R. He is a prominent contributor to the R package ecosystem, developing many widely used packages for writing documents (vitae, icons), teaching (moodlequiz), visualising data (ggquiver, feasts) and forecasting (fable, forecast). Mitchell is passionate about designing friendly software that is easy to learn and use."
  },
  {
    "objectID": "index.html#required-equipment",
    "href": "index.html#required-equipment",
    "title": "Advanced R Tips and Tricks",
    "section": "Required equipment",
    "text": "Required equipment\nPlease bring your own laptop capable of running R."
  },
  {
    "objectID": "index.html#required-software",
    "href": "index.html#required-software",
    "title": "Advanced R Tips and Tricks",
    "section": "Required software",
    "text": "Required software\nTo be able to complete the exercises of this workshop, please install a suitable IDE (such as RStudio), a recent version of R (4.1+) and the following packages.\n\nR developer packages\n\nrlang\nvctrs\npryr\nlobstr\n\n\nThe following code will install the main packages needed for the workshop.\ninstall.packages(c(\"rlang\", \"vctrs\", \"pryr\", \"lobstr))\nPlease have the required software installed and pre-work completed before attending the workshop."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Advanced R Tips and Tricks",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWatch Kelly Bodwin’s UseR! keynote Keep R weird↩︎"
  },
  {
    "objectID": "exercises.html",
    "href": "exercises.html",
    "title": "Exercises",
    "section": "",
    "text": "Advaned R programming"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "License",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution 4.0 International License."
  },
  {
    "objectID": "slides/vectors/index.html#section",
    "href": "slides/vectors/index.html#section",
    "title": "Advanced R Tips and Tricks",
    "section": "",
    "text": "Advanced R  Tips and Tricks\n\n\nVectorisation\n\n\n22nd October 2024 @ WOMBAT\n\nMitchell O’Hara-Wild, Nectric\n\n\n\n\n\n\n\nUseful links\n\n\n social.mitchelloharawild.com\n workshop.nectric.com.au/advr-wombat24/\n mitchelloharawild/workshop-advr-wombat24"
  },
  {
    "objectID": "slides/vectors/index.html#after-the-break",
    "href": "slides/vectors/index.html#after-the-break",
    "title": "Advanced R Tips and Tricks",
    "section": "After the break…",
    "text": "After the break…\n\n\n\n\n\n\n\n\nLearn more advanced R tricks\n\n\n\nAdvanced R 2nd edition textbook\n\nFreely available online! https://adv-r.hadley.nz/\n\n\n\n\n\n\n\n\n\nI appreciate your feedback\n\n\nShort feedback form: https://feedback.nectric.com.au/pZ26\n\n\n\n\n\n\n\n\n\n\nUseful links\n\n\n social.mitchelloharawild.com\n workshop.nectric.com.au/advr-wombat24/\n mitchelloharawild/workshop-advr-wombat24"
  },
  {
    "objectID": "slides/vectors/index.html#unsplash-credits",
    "href": "slides/vectors/index.html#unsplash-credits",
    "title": "Advanced R Tips and Tricks",
    "section": "Unsplash credits",
    "text": "Unsplash credits\n\n\n\n\n\n\n\nThanks to these Unsplash contributors for their photos\n\n\n\n\n\nSander Weeteling: Photo\nKasia Gajek: Photo\nNASA: United States seen from orbit\nBalint Mendlik: Photo\nSander Weeteling: Photo"
  }
]